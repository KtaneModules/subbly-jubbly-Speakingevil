using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;

public class JubblyScript : MonoBehaviour
{

    public KMAudio Audio;
    public KMBombModule module;
    public List<KMSelectable> buttons;
    public GameObject[] board;
    public Transform buttondown;
    public TextMesh[] displays;
    public Text[] qa;
    public Text subdisp;

    private const string usedLetters = "ABCDEFGHIJKLMNOPRSTUVWYZ";
    private readonly Dictionary<char, List<string>> defaultSubblies = new Dictionary<char, List<string>>
    {
        { 'A', new List<string>() { "ASS", "AMOGUS", "ARMPIT"}} ,
        { 'B', new List<string>() { "BALLS", "BOINKY", "BASED", "BITCHY", "BUSSIN", "BOOTY", "BITCHES", "BUSSY" }},
        { 'C', new List<string>() { "CRINKLE", "CRINGE", "CHUNGUS", "COCK" }},
        { 'D', new List<string>() { "DUMPY", "DICK", "DOINKY", "DIGGITY", "DOOF", "DOOPSIE" }},
        { 'E', new List<string>() { "EUPHEMISM", "EGGY", "EDGY", "EGIRL", "EXISH" }},
        { 'F', new List<string>() { "FUGLY", "FUNNY", "FRICK", "FART", "FATTY", "FORTNITE" }},
        { 'G', new List<string>() { "GANGLY", "GOBBLE", "GRUNKLE", "GIGGITY", "GOOBER" }},
        { 'H', new List<string>() { "HOES", "HORNY", "HONKERS", "HEFTY" }},
        { 'I', new List<string>() { "INCY", "ITCHY", "ICKLE", "IRISH" }},
        { 'J', new List<string>() { "JUNK", "JIGGLE", "JOHNSON", "JERK", "JINKIES" }},
        { 'K', new List<string>() { "KINK", "KNICKERS", "KNOBBLY" }},
        { 'L', new List<string>() { "LIGMA", "LANKY", "LUMPY", "LEAN", "LIMP" }},
        { 'M', new List<string>() { "MANCY", "MILKERS", "MEATY", "MORBIUS", "MINGER"}},
        { 'N', new List<string>() { "NANCY", "NIBBLE", "NUTS" }},
        { 'O', new List<string>() { "OOF", "OBESE", "OWO", "OUCHIE", "OOPSIE" }},
        { 'P', new List<string>() { "PLOPPERS", "POGGERS", "PUSS", "PLUMP", "POONANI"}},
        { 'R', new List<string>() { "RUMPY", "RACISM", "ROWDY", "RUBBER" }},
        { 'S', new List<string>() { "SUGMA", "SLOPPY", "SUSSY", "SQUEEZY", "SNIFF", "SHREK", "SEINFELD", "SCRUNKLY" }},
        { 'T', new List<string>() { "TIDDLY", "THICC", "TICKLE", "TESTY", "TWITCHY" }},
        { 'U', new List<string>() { "UGLY", "UWU", "UGANDAN", "UNDERTALE" }},
        { 'V', new List<string>() { "VIBIN", "VEINY", "VORE", "VOLUPTUOUS" }},
        { 'W', new List<string>() { "WIBBLE", "WHIZZIE", "WHOOPIE", "WONKY", "WINCY", "WACKY", "WEEZER", "WHOLESOME"}},
        { 'Y', new List<string>() { "YIPPEE", "YOINK", "YOWZERS", "YIKES", "YEOWZA" } },
        { 'Z', new List<string>() { "ZOINKS", "ZAMN", "ZIPPY" }},
    };
    private Dictionary<char, List<string>> subblies = new Dictionary<char, List<string>>();
    private readonly string[] questions = new string[65]
    {
        "LISTENING SOUND HAS CODE ",
        "CRAZY TALK PHRASE HAS ACTION ",
        "HTTP RESPONSE STATUS HAS RESPONSE ",
        "CHESS RULE DETERMINES THE PIECE AT THE ",
        "ICE CREAM FLAVOUR ",
        "IPHONE IMAGE HAS PIN DIGIT ",
        "DR DOCTOR ",
        "SKYRIM ENEMY IS MOST SUSCEPTIBLE TO ",
        "MORTAL KOMBAT ",
        "MAINTENANCE JOB COSTS Â£",
        "JUKEBOX SONG HAS THE LYRIC \"",
        "EUROPEAN TRAVEL CITY IN THE UK IS ",
        "FONT SELECT TYPEFACE APPEARS ",
        "SUBWAYS STOP IS THE ",
        "COFFEBUCKS DRINK CONTAINS ",
        "HANGOVER CURE INGREDIENT FOLLOWS ",
        "WESTEROS PHRASE IS THE MOTTO OF HOUSE ",
        "MICRO MODULES COMPONENT ",
        "GROCERY STORE ITEM COSTS $",
        "ULTRACUBE FACE IS OBTAINED BY A",
        "STICKY NOTES TASK IS ",
        "MODKIT MODULE HAS EXACTLY THE COMPONENTS: ",
        "BRAWLER DATABASE FACTION DOES ",
        "DACH MAZE STATE SHARES A ",
        "ASSEMBLY CODE FUNCTION IS CARRIED OUT BY ",
        "INGREDIENTS DISH USES THE INGREDIENTS: ",
        "OBJECT SHOWS CONTEST IS ",
        "SILHOUETTES SOLID OCCUPIES CELL ",
        "HOLD UPS MOVE IS THE LAST LISTED ",
        "MISTER SOFTEE ICE CREAM IS ",
        "VARIETY COMPONENT APPEARS IN THE ITEM LIST ",
        "CHARMS SPELL IS USED FOR ",
        "BOARD WALK PROPERTY IS IMMEDIATELY CLOCKWISE OF ",
        "SIMON SERVES ITEM IS THE ",
        "ODD ONE OUT DISPLAY SET HAS GOOD BUTTONS THAT ",
        "SECRET SANTA GIFT HAS AN INITIAL PRICE OF $",
        "SHOGI IDENTIFICATION PIECE CAPTURES THE POSITIONS (FROM C3): ",
        "PHONES MODULE BELONGS TO ",
        "DUNGEON 2ND FLOOR ENEMY IS DEFEATED BY THE SEQUENCE OF ACTIONS: ",
        "BAMBOOZLED AGAIN DISPLAY HAS A RAW VALUE OF ",
        "SONIC & KNUCKLES ",
        "MODULE HOMEWORK MODULE GIVES \"",
        "SWAN SEQUENCE CONTAINS THE NUMBER ",
        "RADIO CHANNEL IS ACCESSED AT A FREQUENCY OF ",
        "SMALL TALK PHRASE IS ",
        "BOOK OF MARIO CHARACTER SAYS THE FOLLOWING QUOTE: \"",
        "SETTING SAIL ",
        "MODULE THAT MAY LOOK LIKE SPIDERMAN 2004 HAS ",
        "BADTV STAGE HAS THE PROMPT ",
        "MATCH REFEREEING THEME BELONGS TO THE PLANET ",
        "MODULE SPRINT MODULE IS FOUND ON PAGE ",
        "BLANK SLATE TELL CORRESPONDS TO SECTION ",
        "MANY POLY INSTRUMENT CORRESPONDS TO A ",
        "WEAKEST LINK QUESTION HAS THE ANSWER \"",
        "ENCHANTMENT TABLE ENCHANTMENT IS ",
        "CRAZY HAMBURGER INGREDIENT IS SAFE TO ADD IF ",
        "CAPTAIN WHEELER CAPTAIN CAN GIVE A B VALUE OF ",
        "PATTERN WIRES RULE GIVES THE PATTERN: ",
        "LUIGI POKER HAND AWARDS A MULTIPLIER OF ",
        "AIR STRIKES ",
        "TEA SET ",
        "ID VERIFICATION EMPLOYEE HAS A BIRTHDAY ON THE ",
        "BAG SEARCH ",
        "CITY PLANNING INFRASTRUCTURE ",
        "CHIPPING TRIANGLES FLAVOUR CORRESPONDS TO "
    };
    private readonly string[][,] jubblies = new string[65][,]
    {
        new string[,] { { "&&&**", "TAXI DISPATCH"}, { "$#$*&", "EXTRACTOR FAN"}, {"#$$**", "TRAIN STATION" }, { "##*$*", "SOCCER MATCH"}, { "$#*$&", "TAWNY OWL"}, { "#&&*#", "SEWING MACHINE"}, { "**#**", "THRUSH NIGHTINGALE"}, { "&#**&", "CAR ENGINE" }, { "&$$&*", "PHONE RINGING"}, { "#&&&&", "TIBETAN NUNS"}, {"**$$$", "THROAT SINGING"}, { "*#&*&", "DIAL UP INTERNET"}, {"**###", "POLICE RADIO SCANNER"}, { "&&$&*", "CENSORSHIP BLEEP"}, { "&$**&", "MEDIEVAL WEAPONS"}, { "#$#&$", "DOOR CLOSING"}, { "$$*$*", "COMPRESSED AIR"}, { "$&#$$", "SERVO MOTOR"}, { "$&&*&", "TEARING FABRIC"}, { "#&$*&", "VACUUM CLEANER"}, { "$*$**", "BALLPOINT PEN WRITING"}, { "*#$&&", "RATTLING IRON CHAIN"}, { "###&$", "BOOK PAGE TURNING"}, { "$*&##", "SQUEAKY TOY"}, { "$&$$*", "FIREWORK EXPLODING"}, { "*$*$*", "GLASS SHATTERING"} },
        new string[,] { { "1/5", "LITERALLY BLANK"}, { "1/4", "LITERALLY NOTHING"}, { "2/5", "NO LITERALLY NOTHING"}, { "7/0", "THE WORD LEFT"}, { "3/9", "ONE THREE TO FOR"}, { "5/2", "NO REALLY"}, { "7/6", "STOP TWICE"}, { "2/3", "ITS SHOWING NOTHING"}, { "5/1", "NO REALLY STOP"}, { "8/3", "PERIOD TWICE"}, { "1/6", "THERES NOTHING"}, { "2/4", "NO COMMA LITERALLY NOTHING"}, { "9/4", "THE WORD STOP TWICE"}, { "9/2", "THE PUNCTUATION FULLSTOP"}, { "6/8", "LEFT ARROW"}, { "6/4", "LEFT ARROW SYMBOL"}, { "6/2", "AN ACTUAL LEFT ARROW"}, { "0/1", "THE WORD BLANK"} },
        new string[,] { { "101", "SWITCHING PROTOCOLS"}, { "301", "MOVED PERMANENTLY"}, { "304", "NOT MODIFIED"}, { "305", "USE PROXY"}, { "400", "BAD REQUEST"}, { "402", "PAYMENT REQUIRED"}, { "404", "NOT FOUND"}, { "408", "REQUEST TIME OUT"}, { "418", "IM A TEAPOT"}, { "500", "INTERNAL SERVER ERROR"}, { "502", "BAD GATEWAY"}, { "503", "SERVICE UNAVAILABLE"} },
        new string[,] { { "FIRST POSITION", "MONARCHY VS THEOCRACY"}, { "SECOND POSITION", "COMMANDER OF THE ARMY"}, { "THIRD POSITION", "A MATTER OF REGENTS"}, { "FOURTH POSITION", "THE IRON TOWER"} },
        new string[,] { { "CONTAINS BANANA", "TUTTI FRUTTI"}, { "IS FIRST ON THE LAST FLAVOUR LIST", "DOUBLE STRAWBERRY"}, { "IS FIRST ON THE FIRST FLAVOUR LIST", "COOKIES AND CREAM"}, { "CONTAINS NUTS", "ROCKY ROAD"}, { "IS FIRST ON THE SECOND FLAVOUR LIST", "DOUBLE CHOCOLATE"}, { "IS SECOND LAST ON THE FIRST FLAVOUR LIST", "RASPBERRY RIPPLE"}, { "IS SECOND LAST ON THE LAST FLAVOUR LIST", "MINT CHOCOLATE CHIP"} },
        new string[,] { { "1", "CHRISTMAS TREE"}, { "7", "FOOTBALL TEAM"}, { "9", "ROAST DINNER"} },
        new string[,] { { "DISEASE CAN BE TREATED WITH TEARS OF TAR", "COLOR ALLERGY"}, { "DISEASE CAN BE TREATED WITH FORTINITE", "FOOT AND MORSE"}, { "DISEASE CAN BE TREATED WITH SCRAPMECHANOL", "GOUT OF LIFE"}, { "DISEASE CAN BE TREATED WITH ASSASSINE CREAM", "URINARY LEDS"}, { "DISEASE CAN BE TREATED WITH WAR-MED", "YES NO INFECTION"}, { "DISEASE CAN BE TREATED WITH RED DED", "CHRONIC TALK"}, { "DISEASE CAN BE TREATED WITH WALDOHOL", "PERSPECTIVE LOSS"}, { "DISEASE CAN BE TREATED WITH TETRISINE", "HUNTINGTONS DISEASE"}, { "TREATMENT CAN BE USED TO CURE BRAINTENANCE", "GR THETA AUTAZINE"}, { "TREATMENT CAN BE USED TO CURE NARCOLIZATION", "VITAMIN WII" }, { "TREATMENT CAN BE USED TO CURE TETRINUS", "NO MERCY"}, { "TREATMENT CAN BE USED TO CURE URINARY LEDS", "ASSASSINE CREAM"}, { "TREATMENT CAN BE USED TO CURE WIDGETING", "GLA DOZE"}, { "TREATMENT CAN BE USED TO CURE XMAS", "BALL OF COOTIE"}, { "TREATMENT CAN BE USED TO CURE YES NO INFECTION", "WAR MED"}, { "TREATMENT CAN BE USED TO CURE ZOOTIES", "CS GO LOTION"}, { "TREATMENT CAN BE USED TO CURE CHRONIC TALK", "RED DED"}, { "TREATMENT CAN BE USED TO CURE JUKEPOX", "SOLID GEAR METAL"}, { "TREATMENT CAN BE USED TO CURE NEUROLYSIS", "VITAMIN BEAM"} },
        new string[,] { { "FIRINIEL'S END", "DRAGON PRIEST"}, { "THE VOLENDRUNG", "FROST TROLL"}, { "WINDSHEAR", "DRAUGR OVERLORD"}, { "THE AXE OF WHITERUN", "CAVE BEAR"}, { "THE BLADE OF WOE", "BLOOD DRAGON"} },
        new string[,] { { "CHARACTER USES THE FATALITY \"DEADLY UPPERCUT\"", "JOHNNY CAGE"}, { "CHARACTER USES THE FATALITY \"DRAGON'S BITE\"", "LIU KANG"}, { "CHARACTER USES THE FATALITY \"FIRE KISS\"", "SONYA BLADE"}, { "MOVE HAS THE COMMAND: LEFT RIGHT A", "GREEN FIREBALL"}, { "MOVE HAS THE COMMAND: LEFT RIGHT B", "SHADOW KICK"}, { "MOVE HAS THE COMMAND: DOWN DOWN C", "NUT CRACKER"}, { "MOVE HAS THE COMMAND: RIGHT RIGHT B", "KNIFE THROW" }, { "MOVE HAS THE COMMAND: RIGHT RIGHT C", "DRAGON FIRE"}, { "MOVE HAS THE COMMAND: RIGHT UP A", "FLYING DRAGON KICK"}, { "MOVE HAS THE COMMAND: LEFT LEFT B", "LIGHTNING BOLT"}, { "MOVE HAS THE COMMAND: LEFT RIGHT C", "TELEPORT PUNCH"}, { "MOVE HAS THE COMMAND: UP RIGHT A", "ENERGY RINGS"}, { "MOVE HAS THE COMMAND: DOWN RIGHT C", "LEG GRAB"}, { "MOVE HAS THE COMMAND: RIGHT LEFT B", "SQUARE WAVE PUNCH"}, { "MOVE HAS THE COMMAND: RIGHT UP B", "ICE FREEZE"}, { "MOVE HAS THE COMMAND: RIGHT DOWN C", "GROUND FREEZE"} },
        new string[,] { { "6", "HEADLIGHT BULB"}, { "10", "WIPER REPLACEMENT"}, { "15", "OIL CHANGE"}, { "25", "BRAKE FLUID CHANGE"}, { "40", "WINDSCREEN CHIP"}, { "80", "ONE TYRE"}, { "150", "WINDSCREEN REPLACEMENT"}, { "320", "FOUR TYRES"}, { "500", "EXHAUST WELDING"}, { "750", "HEAD GASKET REPLACEMENT"} },
        new string[,] { { "ALL THIS AGGRAVATION AND SATISFACTION IN ME\"", "A LITTLE LESS CONVERSATION"}, { "YOUR RIDE, BEST TRIP\"", "ALL THE SMALL THINGS"}, { "IF I LEAVE HERE TOMORROW, WILL YOU STILL REMEMBER ME\"", "FREE BIRD"}, { "I DON'T CARE IF MONDAY'S BLUE\"", "FRIDAY IM IN LOVE"}, { "THER'S A HOLE IN YOUR LOGIC\"", "GOODBYE MR A"}, { "AND THIS PLACE COULD BE MUCH BRIGHTER THAN TOMORROW\"", "HEAL THE WORLD" }, { "SIT DOWN, IT'S JUST A TALK\"", "HOW TO SAVE A LIFE"}, { "THE MOST BEAUTIFUL THING YOU COULD EVER SPEND\"", "OH MY GOD"}, { "I'VE CROSSED THE DESERTS FOR MILES\"", "PURE SHORES"}, { "I NEED THAT DARK IN A LITTLE MORE LIGHT\"", "SAVE ROCK AND ROLL"}, { "I DON'T KNOW WHAT TO SAY, I'LL SAY IT ANYWAY\"", "TAKE ON ME"}, { "WHO KNOWS WHAT TOMORROW BRINGS IN A WORLD FEW HEARTS SURVIVE\"", "UP WHERE WE BELONG"}, { "AND I CAN HARDLY SPEAK\"", "YOU DONT KNOW ME"} },
        new string[,] { { "THE DEPARTURE CITY WITH SERIAL NUMBER CHARACTER: M", "STOKE ON TRENT"}, { "THE DEPARTURE CITY WITH SERIAL NUMBER CHARACTER: Q", "WATFORD JUNCTION"}, { "THE DEPARTURE CITY WITH SERIAL NUMBER CHARACTER: W", "PORTSMOUTH HARBOUR"}, { "THE DEPARTURE CITY WITH SERIAL NUMBER CHARACTER: Z", "HEATHROW AIRPORT"}, { "THE DESTINATION CITY WITH SERIAL NUMBER CHARACTER: A", "BRISTOL TEMPLE MEADS"}, { "THE DESTINATION CITY WITH SERIAL NUMBER CHARACTER: D", "PEMBROKE DOCK"}, { "THE DESTINATION CITY WITH SERIAL NUMBER CHARACTER: G", "LONDON ST PANCRAS"}, { "THE DESTINATION CITY WITH SERIAL NUMBER CHARACTER: T", "STOURBRIDGE TOWN"}, { "THE DESTINATION CITY WITH SERIAL NUMBER CHARACTER: Z", "MANCHESTER VICTORIA"} },
        new string[,] { { "FIRST IN THE SAMPLE LIST", "SPECIAL ELITE"}, { "SECOND IN THE SAMPLE LIST", "GOCHI HAND"}, { "THIRD IN THE SAMPLE LIST", "DAY POSTER BLACK"}, { "FOURTH IN THE SAMPLE LIST", "INDIE FLOWER"}, { "FIFTH IN THE SAMPLE LIST", "COMING SOON"}, { "SIXTH IN THE SAMPLE LIST", "ANONYMOUS PRO"}, { "SEVENTH IN THE SAMPLE LIST", "ROCK SALT"}, { "TENTH IN THE SAMPLE LIST", "OSTRICH SANS"} },
        new string[,] { { "FIRST STOP ON ROUTE 9", "GREEN PARK"}, { "SECOND STOP ON ROUTE 9", "PICCADILLY CIRCUS"}, { "THIRD STOP ON ROUTE 9", "LEICESTER SQUARE"}, { "FIRST STOP ON ROUTE 11", "OXFORD CIRCUS"}, { "SECOND STOP ON ROUTE 11", "TOTTENHAM COURT ROAD"}, { "FIRST STOP ON ROUTE 12", "WARREN STREET"}, { "THIRD STOP ON ROUTE 13", "KINGS CROSS ST PANCRAS"}, { "FIRST STOP ON ROUTE 17", "RICHELIEU DROUOT"}, { "SECOND STOP ON ROUTE 17", "GRANDS BOULEVARDS"}, { "THIRD STOP ON ROUTE 17", "BONNE NOUVELLE"}, { "FIRST STOP ON ROUTE 18", "REAUMUR SEBASTOPOL"}, {"FIRST STOP ON ROUTE 19", "ST MICHEL"}, { "FIRST STOP ON ROUTE 20", "PONT NEUF"}, { "SECOND STOP ON ROUTE 20", "PONT MARIE"}, { "THIRD STOP ON ROUTE 20", "SULLY MORLAND"} },
        new string[,] { { "HAZELNUT", "TWIX FRAPPUCCINO"}, { "PASSION ICED TEA", "THE BLUE DRINK"}, { "AFFOGATO SHOTS", "MATCHA AND ESPRESSO FUSION"}, { "WHITE CHOCOLATE", "LIQUID COCAINE"}, { "TOFFEE", "SMORES HOT CHOCOLATE"}, { "STRAWBERRIES", "THE PINK DRINK"}, { "PEPPERMINT", "GRASSHOPPER FRAPPUCCINO"} },
        new string[,] { { "WHITE WINE", "REMORSE AND CONTRITION" }, { "PROSECCO", "HALF A BIG MAC"}, { "RUM", "BLACK COFFEE"}, { "RED WINE", "FAMILY PACK OF OREOS"}, { "SPIRITS AFTER ADDING AVOCADO TOAST", "SLICED APPLE"}, { "NO KEBAB AFTER ADDING SLICED APPLE", "COOKING OIL"}, { "A NON SPIRIT AFTER ADDING 2 RAW EGGS", "BACON CRISPS"}, { "SHOTS AFTER ADDING LARD", "AVOCADO TOAST"}, { "A DONER KEBAB AFTER ADDING AN ENTIRE CAN OF RED BULL", "WHOLE PIZZA"} },
        new string[,] { { "ARRYN", "AS HIGH AS HONOUR"}, { "BARATHEON", "OURS IS THE FURY"}, { "BOLTON", "OUR BLADES ARE SHARP"}, { "CERWYN", "HONED AND READY"}, { "FREY", "WE STAND TOGETHER"}, { "GREYJOY", "WE DO NOT SOW"}, { "HIGHTOWER", "WE LIGHT THE WAY"}, { "HORNWOOD", "RIGHTEOUS IN WRATH"}, { "KARSTARK", "THE SUN OF WINTER"}, { "LANNISTER", "HEAR ME ROAR"}, { "MARTELL", "UNBOWED UNBENT UNBROKEN"}, {"MORMONT", "HERE WE STAND"}, { "PENROSE", "SET DOWN OUR DEEDS"}, { "ROYCE", "WE REMEMBER"}, { "STARK", "WINTER IS COMING"}, { "TARGARYEN", "FIRE AND BLOOD"}, { "TARLY", "FIRST IN BATTLE"}, { "TULLY", "FAMILY DUTY HONOUR"}, { "TYRELL", "GROWING STRONG"} },
        new string[,] { { "IS INTERACTED WITH LAST", "SOLVE BUTTON"}, { "DISPLAYS CODE ON A SCREEN", "SCRIPT WIRES"}, { "HAS BUTTONS LABELLED WITH ARROWS", "DIRECTIONAL KEYPAD"}, { "HAS SEND AND RECEIVE BUTTONS", "CODE MORSE"}, { "DISPLAYS THREE CHARACTERS", "MATH CODE"}, { "HAS A COOLDOWN", "THE RESET BUTTON"} },
        new string[,] { { "12.48", "BOTTLED WATER"}, { "11.99", "CAT FOOD"}, { "06.28", "GLASS CLEANER"}, { "05.42", "HOT SAUCE"}, { "08.68", "PAPER TOWELS"}, { "05.64", "PEANUT BUTTER"}, { "16.99", "TOILET PAPER"} },
        new string[,] { { "N XY ROTATION", "ZAG TOP RIGHT"}, { "N XZ ROTATION", "TOP BACK RIGHT"}, { "N XW ROTATION", "PONG TOP LEFT"}, { "N XV ROTATION", "BOTTOM BACK RIGHT"}, { " YZ ROTATION", "ZIG TOP BACK"}, { " YW ROTATION", "PONG BACK LEFT"}, { " YV ROTATION", "ZIG FRONT RIGHT"}, { " ZW ROTATION", "PONG ZAG RIGHT"}, { " ZV ROTATION", "PING ZIG BOTTOM"}, { " WV ROTATION", "PING ZAG BACK"} },
        new string[,] { { "FIRST IN THE ADMIN LIST", "PHOTOCOPY MANAGERS SCHEDULE"}, { "SECOND IN THE ADMIN LIST", "MAKE COFFEE FOR VISITORS"}, { "SEVENTH IN THE ADMIN LIST", "BUY TEA AND COFFEE"}, { "LAST IN THE ADMIN LIST", "CHECK TIMESHEETS OF EMPLOYEES"}, { "SECOND IN THE HR LIST", "UPDATE NEW STARTER FILE"}, { "THIRD IN THE HR LIST", "CHANGE ADDRESSES OF EMPLOYEES"}, { "FOURTH IN THE HR LIST", "PHOTOCOPY PERSONNEL FILE"}, { "FIFTH IN THE HR LIST", "INTERVIEW NEW STARTERS"}, { "SIXTH IN THE HR LIST", "DISCIPLINARY WITH DAZARINO"}, { "SEVENTH IN THE HR LIST", "CALL NEW APPLICANTS"}, { "EIGHTH IN THE HR LIST", "MEETING WITH VISITORS"}, { "LAST IN THE HR LIST", "UPDATE VEHICLE DATABASE"}, { "FIRST IN THE PAYROLL LIST", "RECONCILE TAX"}, { "SECOND IN THE PAYROLL LIST", "PAY EMPLOYEES"}, { "THIRD IN THE PAYROLL LIST", "PAY OUTSTANDING INVOICES"}, { "FOURTH IN THE PAYROLL LIST", "PAY IN PETTY CASH"}, { "FIFTH IN THE PAYROLL LIST", "CONTACT UNPAID INVOICES"}, { "SIXTH IN THE PAYROLL LIST", "GENERATE PAYSLIPS"}, { "SEVENTH IN THE PAYROLL LIST", "POST NEXT WEEKS INVOICES"}, { "EIGHTH IN THE PAYROLL LIST", "CALL CLIENT FOR MEETING"}, { "LAST IN THE PAYROLL LIST", "DEPOSIT EARNINGS IN BANK"} },
        new string[,] { { "WIRES", "COLORFUL WIRES"}, { "SYMBOLS", "ADJACENT SYMBOLS"}, { "ALPHABET", "EDGEWORK KEYS"}, { "LED", "LED PATTERN"}, { "WIRES, SYMBOLS", "RUNIC WIRES"}, { "WIRES, ALPHABET", "INDEXED WIRES"}, { "WIRES, LED", "WIRE INSTRUCTIONS"}, { "WIRES, ARROWS", "WIRE MAZE"}, { "SYMBOLS, ALPHABET", "ENCRYPTED KEYPAD"}, { "SYMBOLS, LED", "SYMBOLIC MORSE"}, { "SYMBOLS, ARROWS", "PERSPECTIVE SYMBOLS"}, { "ALPHABET, LED", "SEMAPHORE KEYS"}, { "ALPHABET ARROWS", "ALPHANUMERIC ORDER"}, { "WIRES, SYMBOLS, ALPHABET", "SEQUENCE CUT"}, { "WIRES, SYMBOLS, LED", "HIERARCHICAL WIRES"}, { "WIRES, SYMBOLS, ARROWS", "WIRE SIGNALLING"}, { "WIRES, ALPHABET, LED", "POWER GRID"}, { "WIRES, ALPHABET, ARROWS", "CRUEL WIRE SEQUENCES"}, { "WIRES, LED, ARROWS", "BLINKING WIRES"}, { "SYMBOLS, ALPHABET, LED", "KEY SCORE"}, { "SYMBOLS, ALPHABET, ARROWS", "LYING KEYS"}, { "SYMBOLS, LED, ARROWS", "COLOR OFFSET"}, { "ALPHABET, LED, ARROWS", "LED DIRECTIONS"}, { "WIRES, SYMBOLS, ALPHABET, LED", "THE THIRD WIRE"}, { "WIRES, SYMBOLS, ALPHABET, ARROWS", "THE LAST IN LINE"}, { "WIRES, SYMBOLS, LED, ARROWS", "COLOR DOMINANCE"}, { "WIRES, ALPHABET, LED, ARROWS", "PRECISE WIRES"}, { "SYMBOLS, ALPHABET, LED, ARROWS", "GATED MAZE"}, { "WIRES, SYMBOLS, ALPHABET, LED, ARROWS", "PARANORMAL WIRES"} },
        new string[,] { { "KAZARINA BELONG TO", "TWELVE ORDERS"}, { "ANUBIAS BELONG TO", "CHAOS ARMY"}, { "MASQUERADE BELONG TO", "DOOM BEINGS"} },
        new string[,] { { "DIAMOND BORDER WITH BAVARIA", "BADEN WURTTEMBURG"}, { "DIAMOND BORDER WITH LOWER SAXONY", "MECKLENBURG VORPOMMERN"}, { "TRIANGLE BORDER WITH HESSE", "LOWER SAXONY"}, { "SQUARE BORDER WITH HESSE", "NORTH RHINE WESTPHALIA"}, { "HEART BORDER WITH SAARLAND", "RHINELAND PALATINATE"}, { "TRAPEZIUM BORDER WITH LOWER SAXONY", "SCHLESWIG HOLSTEIN"}, { "DIAMOND BORDER WITH THURINGIA", "SAXONY ANHALT"}, { "DIAMOND BORDER WITH VIENNA", "LOWER AUSTRIA"}, { "TRIANGLE BORDER WITH SALZBURG", "NORTH TYROL"}, { "TRAPEZIUM BORDER WITH BAVARIA", "UPPER AUSTRIA"}, { "STAR BORDER WITH SALZBURG", "EAST TYROL"}, { "STAR BORDER WITH THURGAU", "ST GALLEN"}, { "PARALLELOGRAM BORDER WITH ST GALLEN", "APPENZELL INNER RHODES"}, {"DIAMOND BORDER WITH ST GALLEN", "APPENZELL OUTER RHODES"}, { "HEART BORDER WITH JURA", "BASEL COUNTRY"} },
        new string[,] { { "ADC", "ADD WITH CARRY"}, { "CLC", "CLEAR CARRY FLAG"}, { "CLD", "CLEAR DIRECTION FLAG"}, { "CLI", "CLEAR INTERRUPTION FLAG"}, { "CMC", "COMPLEMENT CARRY FLAG"}, { "CMP", "COMPARE OPERANDS"}, { "CMPSW", "COMPARE WORDS"}, { "DIV", "UNSIGNED DIVIDE"}, { "HLT", "ENTER HALT STATE"}, { "INT", "CALL TO INTERRUPT"}, { "IRET", "RETURN FROM INTERRUPT"}, { "JCC", "JUMP IF CONDITION"}, { "LEA", "LOAD EFFECTIVE ADDRESS"}, { "LODSB", "LOAD STRING BYTE"}, { "LODSW", "LOAD STRING WORD"}, { "MUL", "UNSIGNED MULTIPLY"}, { "NEG", "TWOS COMPLEMENT NEGATION"}, { "NOP", "NO OPERATION"}, { "RET", "RETURN FROM PROCEDURE"}, { "RETN", "RETURN FROM NEAR PROCEDURE"}, { "RETF", "RETURN FROM FAR PROCEDURE"}, { "SBB", "SUBTRACTION WITH BORROW"}, { "STC", "SET CARRY FLAG"}, { "STD", "SET DIRECTION FLAG"}, { "STI", "SET INTERRUPT FLAG"}, { "STOSB", "STORE BYTE IN STRING"}, { "STOSW", "STORE WORD IN STRING"}, { "XCHG", "EXCHANGE DATA"}, { "XLAT", "TABLE LOOK UP TRANSLATION"} },
        new string[,] { { "BLACK TRUMPET, CHANTERELLE, KING OYSTER, MOREL", "MUSHROOM TERRINE"}, { "BASIL, CHEESE, STRAWBERRY, TOMATO", "CAPRESE SALAD"}, { "DILL, TOMATO, WATERMELON", "COLD TOMATO SOUP"}, { "BLOOD ORANGE, LOBSTER, OLIVE OIL, SEA BASS", "SEAFOOD TARTARE"}, { "CHANTERELLE, GRAPES, PARSLEY, SEA BASS, ZUCCHINI", "SEA BASS POELE"}, { "LEMON, PORCINI, VEAL", "SWEETBREAD POELE"}, { "BEEF, CORNICHON, EGGPLANT, ZUCCHINI", "BEEF SAUTE"}, { "BUTTER, CHOCOLATE, LEMON", "CHOCOLATE MOUSSE"}, { "APPLE, APRICOT, PEAR", "FRESH FRUIT COMPOTE"}, { "BUTTER, HONEY, ORANGE", "CREPES SUZETTE"}, { "BLACKBERRY, CHEESE, GOOSEBERRY, LEMON, RASPBERRY", "BERRIES AU FROMAGE"}, { "BANANA, BUTTER, HONEY", "WARM BANANA SOUFFLE"}, { "GOOSEBERRY, MELON, PEAR", "FRUIT GELEE"}, { "BANANA, BLOOD ORANGE, GRAPES, MELON, SOUR CHERRY, STRAWBERRY, WATERMELON", "TARTE AUX FRUITS"} },
        new string[,] { { "CREATIVE TYPE AND WATER STYLE", "UNDERWATER BASKET WEAVING"}, { "BATTLE TYPE AND WATER STYLE", "WATER BALLOON FIGHT"}, { "ATHLETIC TYPE AND WATER STYLE", "CAVE DIVING"}, { "RACE TYPE AND STADIUM STYLE", "CHARIOT RACE"}, { "CREATIVE TYPE AND STADIUM STYLE", "EQUESTRAIN ACROBATICS"}, { "BATTLE TYPE AND STADIUM STYLE", "GLADITORIAL FIGHT"}, { "ATHLETIC TYPE AND STADIUM STYLE", "THE OBJECTIVE GAMES"}, { "RACE TYPE AND WILD STYLE", "ESCAPE THE VOLCANO"}, { "CREATIVE TYPE AND WILD STYLE", "JUNGLE SURVIVAL"}, { "ATHLETIC TYPE AND WILD STYLE", "CLIFF CLIMBING"}, { "RACE TYPE AND WEIRD STYLE", "SACK RACE"}, { "CREATIVE TYPE AND WEIRD STYLE", "INTERPRETIVE DANCE"} },
        new string[,] { { "A4", "ANNULAR CYLINDER"}, { "A7", "BILINSKI DODECAHEDRON"}, { "B1", "CIRCULAR FRUSTUM"}, { "B3", "DELTOIDAL ICOSITETRAHEDRON"}, { "C1", "HEXAGONAL PRISM"}, { "C2", "HYPERBOLIC BICYLINDER"}, { "C3", "HYPERBOLIC CYLINDER"}, { "C7", "DOUBLE HYPERBOLIC CYLINDER"}, { "C8", "ELONGATED BICONE"}, { "D3", "NAPKIN RING"}, { "D4", "OBLATE SPHEROID"}, { "D6", "ORTHOGONAL TRICYLINDER"}, { "D7", "PENTAGONAL ANTIPRISM"}, { "D8", "PENTAGONAL BIPYRAMID"}, { "E1", "PENTAGONAL PRISM"}, { "E3", "PLANAR TRICYLINDER"}, { "E4", "PROLATE SPHEROID"}, { "E7", "REULEAUX CONE"}, { "E8", "REULEAUX TETRAHEDRON"}, { "F1", "REULEAUX TRIANGULAR PRISM"}, { "F2", "RHOMBIC DODECAHEDRON"}, { "F3", "RHOMBIC ICOSAHEDRON"}, { "F4", "RHOMBIC TRIACONTAHEDRON"}, { "G1", "SNUB DISPHENOID"}, { "G2", "SPHERICAL CONE"}, { "G3", "SPHERICAL SQUARE PYRAMID"}, { "G5", "SPHERICAL WEDGE"}, { "G6", "SQUARE ANTIPRISM"}, { "G7", "SQUARE FRUSTUM"}, { "H5", "TRIANGULAR BIPYRAMIND"}, { "H6", "TRIANGULAR PRISM"} },
        new string[,] { { "FIRE TYPE MOVE", "BLAZING HELL"}, { "ICE TYPE MOVE", "ICE AGE"}, { "ELEC TYPE MOVE", "WILD THUNDER"}, { "WIND TYPE MOVE", "VACUUM WAVE"}, { "NUCLEAR TYPE MOVE", "COSMIC FLARE"}, { "PSY TYPE MOVE", "PSYCHO BLAST"}, { "BLESS TYPE MOVE", "SHINING ARROWS"}, { "CURSE TYPE MOVE", "ABYSSAL WINGS"}, { "GUN TYPE MOVE", "RIOT GUN"} },
        new string[,] { { "BOBBY'S FAVOURITE", "SNOW CONE"}, { "CLARISSA'S FAVOURITE", "ICE CREAM SANDWICH"}, { "DAVID'S FAVOURITE", "KING CONE"}, { "GEORGE'S FAVOURITE", "CHOCO TACO"}, { "HUNTER'S FAVOURITE", "BANANA FUDGE BOMB"}, { "ISABELLA'S FAVOURITE", "CHOCOLATE ECLAIR"}, { "KYLE'S FAVOURITE", "SCREW BALL"}, { "LILY'S FAVOURITE", "PUSH UP POP"}, { "BOBBY'S SECOND FAVOURITE", "FUDGE POP"}, { "EVERYBODY'S LEAST FAVOURITE", "SPONGEBOB BAR"} },
        new string[,] { { "FIRST", "WHITE BUTTON"}, { "BETWEEN WHITE BUTTON AND KEY IN LOCK", "RED SWITCH"}, { "BETWEEN RED SWITCH AND TWO BY TWO WHITE KEYPAD", "KEY IN LOCK"}, { "BETWEEN TWO BY TWO WHITE KEYPAD AND DARK ON LIGHT DIE", "LIGHT ON DARK DIE"}, { "BETWEEN LIGHT ON DARK DIE AND YELLOW BUTTON", "DARK ON LIGHT DIE"}, { "BETWEEN DARK ON LIGHT DIE AND BLUE SWITCH", "YELLOW BUTTON"}, { "BETWEEN FOUR BY FOUR MAZE AND ONE BY THREE WHITE KEYPAD", "YELLOW KEYPAD"}, {"BETWEEN LED AND BLUE KNOB" , "RED WIRE"}, { "BETWEEN RED WIRE AND YELLOW SWITCH", "BLUE KNOB"}, { "BETWEEN BLUE KNOB AND WHITE SWITCH", "YELLOW SWITCH"}, { "BETWEEN YELLOW SWITCH AND DESCENDING TIMER", "WHITE SWITCH"}, { "BETWEEN DESCENDING TIMER AND FOUR BY THREE MAZE", "RED BUTTON"}, { "BETWEEN FOUR BY THREE MAZE AND THREE BY ONE WHITE KEYPAD", "YELLOW KNOB"}, { "BETWEEN THREE BY ONE WHITE KEYPAD AND WHITE WIRE", "RED BULB"}, { "BETWEEN THREE BY THREE MAZE AND BLACK KNOB", "BLACK WIRE"}, { "BETWEEN BLACK WIRE AND BLUE BUTTON", "BLACK KNOB"}, { "BETWEEN BLUE BUTTON AND BLUE WIRE", "BLUE KEYPAD"}, { "BETWEEN ONE BY FOUR WHITE KEYPAD AND VERTICAL SLIDER", "HORIZONTAL SLIDER"}, { "BETWEEN HORIZONAL SLIDER AND YELLOW WIRE", "VERTICAL SLIDER"}, { "BETWEEN VERTICAL SLIDER AND DIGIT DISPLAY", "YELLOW WIRE"}, { "BETWEEN DIGIT DISPLAY AND YELLOW BULB", "WHITE KNOB"}, { "BETWEEN WHITE KNOB AND BRAILLE DISPLAY", "YELLOW BULB"}, { "BETWEEN YELLOW BULB AND RED KEYPAD", "BRAILLE DISPLAY"}, { "BETWEEN BRAILLE DISPLAY AND RED KNOB", "RED KEYPAD"}, { "BETWEEN RED KEYPAD AND LETTER DISPLAY", "RED KNOB"}, { "LAST", "LETTER DISPLAY"} },
        new string[,] { { "TRAIN SUMMONING", "CONFORMARE SERIES"}, { "UNCOVERING ANIMAL TRACKS", "VESTIGIUM OSTENDARE"}, { "CATCHING FISH", "AENIGMA INSULSUS"}, { "NUMERIC SQUEEZING", "ARIERAE FACTURA"}, { "INTERACTING WITH BIRDS", "FULICES TERREAT"}, { "FLAVOURING DESSERTS", "POMI AMBROSIA"}, { "SETTLEMENT CONSTRUCTION", "URBS CRUMINIS"}, { "PLANT IDENTIFICATION", "MORTUOS DEFENDISSE"}, { "COMPUTER HACKING", "INCURRERE MACHINATIONES"}, { "RAIN SUMMONING", "PLUVIARUM VERSICOLORIUM"}, { "HIGHER DIMENSIONAL GEOMETRY GENERATION", "TESSELLAM ADCESSIO"}, { "CREATING LIFE", "SICUT PATER"}, { "CURSING DOUBLE-OH", "VENDICARE COMPOSITUM"}, { "GHOST BANISHMENT", "SPECULI EXPIATIO"}, { "INTERACTING WITH TRAINGLES", "PRAESTIGIATOR FABARUM"}, { "M SUMMONING", "SILENTIUM COELI"}, { "NEEDLE THREADING", "DAEDALAE ORBITAE"}, { "NETHERITE MINING", "VASTATOR METALLIS TESQUORUM"} },
        new string[,] { { "GO", "MEDITERRANEAN AVENUE"}, { "READING RAILROAD", "ORIENTAL AVENUE"}, { "JAIL", "ST CHARLES PLACE"}, { "THE ELECTRIC COMPANY", "STATES AVENUE"}, { "PENNSYLVANIA RAILROAD", "ST JAMES PLACE"}, { "FREE PARKING", "KENTUCKY AVENUE"}, { "WATER WORKS", "MARVIN GARDENS"}, { "GO TO JAIL", "PACIFIC AVENUE"} },
        new string[,] { { "RED DRINK", "CRUELO JUICE"}, { "WHITE DRINK", "DEFUSE JUICE"}, { "BLUE DRINK", "SIMONS SPECIAL MIX"}, { "BROWN DRINK", "BOOM LAGER BEER"}, { "GREEN DRINK", "FORGET COCKTAIL"}, { "YELLOW DRINK", "WIRE SHAKE"}, { "ORANGE DRINK", "DETO BULL"}, { "PINK DRINK", "TASHAS DRINK"}, { "RED APPETIZER", "CAESAR SALAD"}, { "WHITE APPETIZER", "EDGEWORK TOAST"}, { "BROWN APPETIZER", "BIG BOOM TORTELLINI"}, { "GREEN APPETIZER", "STATUS LIGHT ROLLS"}, { "YELLOW APPETIZER", "BLAST SHRIMPS"}, { "ORANGE APPETIZER", "MORSE SOUP"}, { "PINK APPETIZER", "BOOLEAN WAFFLES"}, { "RED MAIN COURSE", "FORGHETTI BOMBOGNESE"}, { "WHITE MAIN COURSE", "NATO SHRIMPS"}, { "BLUE MAIN COURSE", "WIRE SPAGHETTI"}, { "BROWN MAIN COURSE", "INDICATOR TAR TAR"}, { "GREEN MAIN COURSE", "CENTURION WINGS"}, { "YELLOW MAIN COURSE", "COLORED SPARE RIBS"}, { "ORANGE MAIN COURSE", "OMELETTE AU BOMBAGE"}, { "PINK MAIN COURSE", "VEGGIE BLAST PLATE"}, { "RED DESSERT", "STRIKE PIE"}, { "WHITE DESSERT", "BLASTWAVE COMPOTE"}, { "BLUE DESSERT", "NOT ICE CREAM"}, { "BROWN DESSERT", "DEFUSE AU CHOCOLAT"}, { "GREEN DESSERT", "SOLVE CAKE"}, { "ORANGE DESSERT", "BAMBOOZLING WAFFLES"} },
        new string[,] { { "SPELL A FIVE LETTER WORD", "ENCODED LETTERS"}, { "ARE VALID CHEMICAL SYMBOLS", "LETTER CODES"}, { "ALL BEGIN WITH SAME LETTER", "COUNTRY FLAGS"}, { "FORM A MAJOR SCALE", "MUSICAL NOTES"}, { "HAVE THE SAME OFFSET APPLIED TO THEIR BASE VALUES", "COLORS WITH NUMBERS"}, { "HAVE EQUAL R, G, OR B COMPONENTS", "COLORS WITH NAMES"}, { "DISPLAY A VALID FORENAME/SURNAME COMBINATION", "BENEDICT CUMBERBATCH NAMES"}, { "DISPLAY ICONS THAT CAN BE FOUND ALONG A SHARED EDGE", "SYMBOLS FROM FRIENDSHIP"}, { "DISPLAY PRODUCTS FROM THE SAME MODULE", "GROCERY ITEMS"}, { "DISPLAY ALL PRODUCTS OR ALL BRANDS", "WORDS FROM IKEA"}, { "ARE ALIVE AT THE SAME TIME", "NAMES FROM LIONS SHARE"}, { "DISPLAY LOCATIONS ON THE SAME LINE", "LONDON UNDERGROUND STATIONS"}, { "SHOW POWERUPS FROM THE SAME GAME", "QUESTION MARK IMAGES"}, { "FORM A LINE IN A HEXAGONAL GRID", "ZOO ANIMALS"} },
        new string[,] { { "22", "FOREIGN COINS"}, { "35", "WALKIE TALKIE"}, { "55", "PIPE BOMB"}, { "79", "TOY PIANO"}, { "15", "WINE GLASS"}, { "59", "TORTURED SOUL"}, { "31", "LIVE CHICKEN"}, { "73", "GOLD MARBLES"}, { "95", "DISCORD NITRO"} },
        new string[,] { { "C2, C4", "GO BETWEEN"}, { "A3, B3, C2, C4, D3, E3", "SIDE MOVER"}, { "B3, C1, C2, C4, C5, D3", "VERTICAL MOVER"}, { "A1, A5, B2, B3, B4, C2, C4, D2, D3, D4, E1, E5", "DRAGON HORSE"}, { "A3, B2, B3, B4, C1, C2, C3, C4, D2, D3, D4, E3", "DRAGON KING"}, { "C1, C2, C4, C5", "REVERSE CHARIOT"}, { "B2, B3, B4, C4, D2, D3, D4", "BLIND TIGER"}, { "B2, B4, C2, C4, D2, D4", "FEROCIOUS LEOPARD"}, { "B2, C2, C4, D2", "COPPER GENERAL"}, { "B2, B4, C2, D2, D4", "SILVER GENERAL"}, { "B2, B3, B4, C2, D2, D3, D4", "DRUNK ELEPHANT"}, { "B2, B3, B4, C1, C2, C3, C4, D2, D3, D4", "FLYING STAG"}, { "A1, A5, B2, B4, C1, C2, C4, C5, D2, D4, E1, E5", "FLYING OX"}, { "A1, A3, A5, B2, B3, B4, D2, D3, D4, E1, E3, E5", "FREE BOAR"}, { "A1, B2, C1, C2, C4, C5, D2, E1", "WHITE HORSE"} },
        new string[,] { { "ARTHUR", "BIG CIRCLE"}, { "CHEVON", "BLACK HOLE"}, { "DANTE", "YELLOW ARROWS"}, { "HESTER", "REGULAR HEXPRESSIONS"}, { "ISALA", "SIMON SHRIEKS"}, { "MEGHAN", "SCAVENGER HUNT"}, { "OLIVER", "BINARY PUZZLE"}, { "RILEY", "FORGET THIS"}, { "TAMBRY", "BRUSH STROKES"}, { "VIA", "THE ASSORTED ARRANGEMENT"}, { "YARETZI", "BONE APPLE TEA"}, { "WANDA", "ROUND KEYPAD"}, { "SIA", "IKEA PLUSHIES"}, { "SEVEN", "INDIGO CIPHER"}, { "OCTAVIUS", "HOLD UPS"}, { "LORD HONKINGSHIRE THE THIRD", "DUCK DUCK GOOSE"} },
        new string[,] { { "SWORD, SHIELD, SHIELD, FORWARD, SWORD, SHIELD, SHIELD, LEFT, RIGHT, SWORD", "ANCIENT DRAGON"}, { "SWORD, SWORD, SHIELD, SWORD", "GIANT SPIDER"}, { "SWORD, SWORD", "HYPNO TOAD"}, { "SWORD, LEFT, RIGHT, SHIELD, SWORD, LEFT, SWORD, RIGHT, SHIELD, SWORD, SWORD, FORWARD, LEFT, LEFT, SHIELD, SWORD, FORWARD, SHIELD, SHIELD, SHIELD, SWORD, LEFT, SWORD, SWORD, LEFT, SWORD", "LAST LAST MONSTER"}, { "LEFT, LEFT, RIGHT, FORWARD, RIGHT, LEFT, FORWARD, FORWARD, LEFT, RIGHT, RIGHT, RIGHT, SWORD", "LIVING CHESS BOARD"}, { "LEFT, SHIELD, RIGHT, SHIELD, FORWARD, SHIELD, SWORD, SWORD, FORWARD", "LIVING WALL"}, { "SHIELD SHIELD SHIELD, LEFT, SHIELD, RIGHT, SHIELD, SHIELD, FORWARD, FORWARD, SHIELD", "SHADOW OF THE RABBIT"} },
        new string[,] { { "24", "ONE LETTER"}, {"39", "ONE COLOUR"}, { "15", "ONE PHRASE"}, { "60", "E THEN E"}, { "69", "PAPHA ALPA"}, { "59", "G IN JADE"}, { "63", "G IN ROSE"}, { "42", "BLUE IN RED"}, { "89", "YES BUT NO"}, { "79", "TWO BUTTONS"}, { "71", "SIX BUTTONS"}, { "88", "THREE ONES"}, { "48", "IN RED"} },
        new string[,] { { "ZONE FEATURES THE SOUND \"JUMP\"", "MUSHROOM HILL"}, { "ZONE FEATURES THE SOUND \"NOT ENOUGH RINGS\"", "FLYING BATTERY"}, { "ZONE FEATURES THE SOUND \"SPIKES\"", "LAVA REEF"}, { "ZONE FEATURES THE SOUND \"BUMPER\"", "DEATH EGG"}, { "IMAGE HAS A BASE CODE OF 17", "SONIC THE HEDGEHOG"}, { "IMAGE HAS A BASE CODE OF 4", "MILES TAILS PROWER"}, { "IMAGE HAS A BASE CODE OF 12", "KNUCKLES THE ECHIDNA"}, { "IMAGE HAS A BASE CODE OF 8", "SPIKE BONKER"}, { "IMAGE HAS A BASE CODE OF 7", "RUNNING BOOTS"}, { "IMAGE HAS A BASE CODE OF 13", "FIRE SHIELD"}, { "IMAGE HAS A BASE CODE OF 9", "KNUCKLES EXTRA LIFE"}, { "IMAGE HAS A BASE CODE OF 11", "LIGHTNING SHIELD"} },
        new string[,] { { "UHH\" AS A POSSIBLE ANSWER", "WHOS ON FIRST"}, { "YES\" AS A POSSIBLE ANSWER", "COMPLICATED WIRES"}, { "SOLVE TWO BITS\" AS A POSSIBLE ANSWER", "TURN THE KEYS"}, { "DC\" AS A POSSIBLE ANSWER", "TWO BITS"}, { "55\" AS A POSSIBLE ANSWER", "RANDOM NUMBER GENERATOR"}, { "33\" AS A POSSIBLE ANSWER", "BUTTON MASHER"}, { "21\" AS A POSSIBLE ANSWER", "HEX TO DECIMAL"}, { "8/1\" AS A POSSIBLE ANSWER", "CRAZY TALK"}, { "CRANBERRY CREAM\" AS A POSSIBLE ANSWER", "ICE CREAM"}, { "RED\" AS A POSSIBLE ANSWER", "LIGHT CYCLE"}, { "WALLY\" AS A POSSIBLE ANSWER", "BRITISH SLANG"}, { "AM\" AS A POSSIBLE ANSWER", "PERIODIC TABLE"}, { "BUTT\" AS A POSSIBLE ANSWER", "BENEDICT CUMBERBATCH"}, { "TABLATURE\" AS A POSSIBLE ANSWER", "T WORDS"} },
        new string[,] { { "59", "RADZINSKYS BINOMIAL SPIRAL"}, { "18", "BAKUNINS CONSTANTS"}, { "32", "DEGROOTS SEQUENCE"}, { "17", "MINKOWSKIS CYCLIC QUADRATICS"} },
        new string[,] { { "101.9", "SKY RADIO"}, { "99.9", "CLASSIC FM"}, { "102.7", "HEART RADIO"}, { "96.1", "ROTHER FM"}, { "103.6", "RADIO HAMBURG"}, { "96.0", "KLASSIK RADIO"}, { "100", "JAZZ RADIO"}, { "89.8", "RADIO NOVA"}, { "89.4", "RADIO LIBERTAIRE"} },
        new string[,] { { "FIRST IN THE TABLE GIVEN BY THE DISPLAY \"TOP\"", "OKAY READY THE PHRASE IS"}, { "SECOND IN THE TABLE GIVEN BY THE DISPLAY \"TOP\"", "YOURE GOING TO HOLD A BUTTON"}, { "THIRD IN THE TABLE GIVEN BY THE DISPLAY \"TOP\"", "DO YOU HAVE A STRIKE"}, { "FIRST IN THE TABLE GIVEN BY THE DISPLAY \"YEAH\"", "WAIT LAG I CANT HEAR YOU"}, { "SECOND IN THE TABLE GIVEN BY THE DISPLAY \"YEAH\"", "YOU HEARD ME WRONG AGAIN"}, { "THIRD IN THE TABLE GIVEN BY THE DISPLAY \"YEAH\"", "HOLD ON NEVER MIND I AM WRONG"}, { "FIRST IN THE TABLE GIVEN THE DISPLAY \"NAH\"", "ALL RIGHT I GOT NOTHING"}, { "SECOND IN THE TABLE GIVEN BY THE DISPLAY \"NAH\"", "WHAT WHAT WAS THE WORD AGAIN"}, { "THIRD IN THE TABLE GIVEN BY THE DISPLAY \"NAH\"", "I HATE DOING THIS MODULE"}, { "FIRST IN THE TABLE GIVEN BY THE DISPLAY \"CEA\"", "CAN I GET ANOTHER MODULE"}, { "SECOND IN THE TABLE GIVEN BY THE DISPLAY \"CEA\"", "UH HUH SORRY MIDDLE OF SOMETHING"}, { "THIRD IN THE TABLE GIVEN BY THE DISPLAY \"CEA\"", "WAIT THIS IS WHOS ON FIRST"}, { "FIRST IN THE TABLE GIVEN BY THE DISPLAY \"YUP\"", "YOU SHOULD BE DONE RIGHT"}, { "SECOND IN THE TABLE GIVEN BY THE DISPLAY \"YUP\"", "NO LIKE DISPLAY SAYS WHAT"}, { "THIRD IN THE TABLE GIVEN BY THE DISPLAY \"YUP\"", "ONE TO THREE FOR FIVE"}, { "FIRST IN THE TABLE GIVEN BY THE DISPLAY \"INDIA\"", "I CANT FIND THE WORD"}, { "SECOND IN THE TABLE GIVEN BY THE DISPLAY \"INDIA\"", "MIDDLE RIGHT WAIT DONT HOLD ON"}, { "THIRD IN THE TABLE GIVEN BY THE DISPLAY \"INDIA\"", "QUOTE LEFT BUTTON PRESS END QUOTE"}, { "FIRST IN THE TABLE GIVEN BY THE DISPLAY \"NOPE\"", "UHHH WAIT I WAS WRONG"}, { "SECOND IN THE TABLE GIVEN BY THE DISPLAY \"NOPE\"", "RIGHT SAY THAT AGAIN PLEASE"}, { "THIRD IN THE TABLE GIVEN BY THE DISPLAY \"NOPE\"", "PRESS THE MIDDLE LEFT BUTTON"}, { "FIRST IN THE TABLE GIVEN BY THE DISPLAY \"EYE\"", "I THINK YOU SHOULD STRIKE"}, { "SECOND IN THE TABLE GIVEN BY THE DISPLAY \"EYE\"", "YOU CUT OUT I DIDNT HEAR"}, { "THIRD IN THE TABLE GIVEN BY THE DISPLAY \"EYE\"", "READ THE NEXT STAGE AGAIN"} },
        new string[,] { { "STOP TALKING WITH PUZZLES, CHICKEN SPERM", "GOD BROWSER"}, { "BAD IS NOT RIGHT! DUMBASS!", "QUIZ THWOMB"}, { "WHOA! FREE CAKE IN THE COUNTRY! LET'S BE CALM.", "YOSHI KID"}, { "HE...FOUND MY SECRET...MY SECRET...PUMPKIN...", "PROSECUTOR GRUBBA"} },
        new string[,] { { "BODY OF WATER HAS EQUATION: (A PLUS B) TIMES C", "ATLANTIC OCEAN"}, { "BODY OF WATER HAS EQUATION: (A PLUS C) TIMES B", "PACIFIC OCEAN"}, { "BODY OF WATER HAS EQUATION: (B PLUS C) TIMES A", "INDIAN OCEAN"}, { "BODY OF WATER HAS EQUATION: A TIMES B TIMES C", "BALTIC SEA"}, { "BODY OF WATER HAS EQUATION: MAX(A, B, C)", "BLACK SEA"}, { "BOAT CORRESPONDS TO THE LETTER J", "TOPSAIL SCHOONER"}, { "BOAT CORRESPONDS TO THE LETTER L", "SCHOONER BRIG"}, { "BOAT CORRESPONDS TO THE LETTER Q", "FULLY RIGGED SHIP"} },
        new string[,] { { "A PIANO", "PIANO KEYS"}, { "KANYE WEST", "TRICK OR TREAT"}, { "A TREE", "CHRISTMAS PRESENTS"}, { "A ANNOYING ORANGE", "VTUBER IDENTIFICATION"}, { "A BRITISH CHAINSMOKER", "BOTTOM GEAR"} },
        new string[,] { { "\"FOLLOW!\"", "VERY ANNOYING ARROWS"}, { "\"COLLECT!\"", "AVOIDANCE DELUXE EDITION"}, { "\"ARRANGE!\"", "STACK OVERFLOW"}, { "\"SNIPE!\"", "WANTED DEAD OR ASLEEP"}, { "\"DEFEAT!\"", "ONE STRIKE DUEL"}, { "\"MATCH!\"", "LIGHTS ON AND OFF AGAIN"}, { "\"COUNT!\"", "SWARM CENSUS"}, { "\"MASH!\"", "ARTIST UNKNOWN"}, { "\"EAT!\"", "SNAKE EYES"}, { "\"IDENTIFY!\"", "SIL WHO ETTES"}, { "\"WHACK!\"", "WHACK A MOUTH"} },
        new string[,] { { "ANASAZE", "WILD WEST COWBOY"}, { "BAVOOM", "FUNKY HORN"}, { "CAVIOUS", "AMBIENT PIPES"}, { "FIRIM", "ROCKING SPIRIT"}, { "FLORIAS", "INDIE MUSIC TROUPE"}, { "FORTE", "STEPPED ON"}, { "FREAZE", "WINTER IMPASSE"}, { "GLOBIN", "INNER BUBBLES"}, { "HEVENDOR", "SPACE TIME CONTINUUM"}, { "LASTAR", "SOLAR CHIMES"}, { "MEGADOM", "MAJOR TEMPO"}, { "STARRLI", "HOLDIAY LAUGHTER"}, { "SUBURBION", "HOT REVIVAL"}, { "THIRNOVA", "BOSSA CAFE"}, { "VUBBLE", "NATURAL PARADISE"}, { "WIRAL", "SPEED OF MAGIC"}, { "WUUD", "EARTH RHYTHMS"} },
        new string[,] { { "2 OF THE MANUAL", "COLOR CROSSED WIRES" }, { "3 OF THE MANUAL", "PROGRAMMED BUTTON"}, { "4 OF THE MANUAL", "MORSE RESPONSE"}, { "7 OF THE MANUAL", "PASSWORD ENCRYPTION"} },
        new string[,] { { "1", "REGION STARTS CYCLING BRAILLE" }, {"2", "TAP CODE PLAYS"}, { "3", "MODULE CARCKS"}, { "4", "POLYGON APPEARS"}, { "5", "HINGE FALLS OFF" }, { "6", "HIGH PITCHED SOUND PLAYS"}, { "7", "NUMBERS APPEAR ON ALL OTHER REGIONS"}, { "8", "NOTHING INITIALLY HAPPENS"} },
        new string[,] { { "DARK GREEN BUTTON", "KICK DRUM" }, { "YELLOW BUTTON", "GLASS TAP"}, { "LIGHT GREY BUTTON", "FINGER SNAP"}, { "TEAL BUTTON", "BONGO DRUM"}, { "DARK BLUE BUTTON", "STEEL DRUM"}, { "DARK RED BUTTON", "SLEIGH BELL"} },
        new string[,] { { "GREEN\"", "WHAT COLOUR IS THE TEXT IN ENGLISH TEST" }, { "GARNET THEIF\"", "WHAT MODULE DOES A BEGGAR COME FROM"}, { "AUGUSTUS CAESAR\"", "WHO WAS THE FIRST EMPEROR OF ROME"}, { "1989\"", "WHAT YEAR DID THE BERLIN WALL FALL"}, { "NEPAL\"", "MOUNT EVEREST IS LOCATED IN WHICH COUNTRY"}, { "SOUTH AMERICA\"", "WHICH CONTINENT DOES GUYANA LIE"}, { "PARROTS\"", "MACAWS ARE FROM WHICH FAMILY OF BIRDS"}, { "KID\"", "A BABY GOAT IS CALLED WHAT"}, { "PANDA\"", "WHAT ANIMAL EATS MAINLY BAMBOO"}, { "PORCUPINE\"", "WHAT ANIMAL IS COVERED IN QUILLS"}, { "13\"", "HOW MANY ARE IN A BAKERS DOZEN"}, { "PINEAPPLE\"", "WHAT FRUIT JUICE IS IN A PINA COLADA"} },
        new string[,] { { "SECOND IN THE LIST", "BANE OF ARTHOPODS" }, { "THIRD IN THE LIST", "BLAST PROTECTION"}, { "SIXTH IN THE LIST", "FIRS ASPECT"}, { "SEVENTH IN THE LIST", "FIRE PROTECTION"}, { "THIRTEENTH IN THE LIST", "LUCK OF THE SEA"}, { "SEVENTEENTH IN THE LIST", "SILK TOUCH"} },
        new string[,] { { "THERE HAVE NOT BEEN TWO OCCURENCES OF ANOTHER INGREDIENT SINCE ITS LAST APPEARANCE", "BREAD MADE IN TURKEY" }, { "IT HAS THREE OR FEWER OCCURRENCES", "CHEESE FROM SAO PAULO FROM BRAZIL"}, { "THERE HAVE BEEN NINE OR FEWER TOTAL INGREDIENTS", "GRASS OF DEATH"}, { "ITS PREVIOUS OCCURRENCE FOLLOWED BREAD, OIL, OR PEPPERS", "HORSE MEAT"}, { "TWO OF THE SAME INGREDIENT HAVE NEVER APPEARED CONSECUTIVELY", "OIL FROM IRAQ"}, { "ANY ANOTHER INGREDIENT HAS YET TO APPEAR", "RED HOT CHILLI PEPPERS"} },
        new string[,] { { "1", "CAPTAIN JACK" }, { "2", "CAPTAIN MORGAN"}, { "3", "CAPTAIN SQUIGGLE"}, { "4", "ADMIRAL FLAPPA"}, { "5", "ADMIRAL BUBBLES"}, { "8", "CAPTAIN BLACKBEARD"}, { "10", "ADMIRAL QUIRKY"}, { "12", "CAPTAIN WHEELER"}, { "13", "ADMIRAL SNICKER"}, { "29", "DAVY JONES"} },
        new string[,] { { "TRIANGLE, CIRCLE, SQUARE, STAR, TRIANGLE", "THERE ARE NO REPEATING COLOURS"}, { "STAR, CIRCLE, TRIANGLE, TRIANGLE, SQUARE", "THREE WIRES ARE RED"}, { "STAR, SQUARE, CIRCLE, CIRCLE, SQUARE", "ONLY TWO COLOURS REPEAT"} },
        new string[,] { { "3", "TWO PAIR"}, { "4", "THREE OF A KIND"}, { "6", "FULL HOUSE"}, { "8", "FOUR OF A KIND"}, { "16", "FIVE OF A KIND"} },
        new string[,] { { "LOCATION ALIGNS WITH THE CONDITION \"HOURS ON TIMESTAMP IS 6 OR LESS\"", "CYCLE HILLS"}, { "LOCATION ALIGNS WITH THE CONDITION \"MINUTES ON TIMESTAMP IS EVEN\"", "BRUSH OAKS"}, { "LOCATION ALIGNS WITH THE CONDITION \"ARROWS ARE RED OR BLUE\"", "MYSTIC SQUARE"}, { "LOCATION ALIGNS WITH THE CONDITION \"TARGET'S USERNAME IS 10+ CHARACTERS LONG\"", "BLIND VALLEY"}, { "LOCATION ALIGNS WITH THE CONDITION \"TIMESTAMP SAYS \"PM\"\"", "DIGIT SPRINGS"}, { "LOCATION ALIGNS WITH THE CONDITION \"BORDER OF CROSSHAIR IS BLACK\"", "FORT TEAN"}, { "LOCATION ALIGNS WITH THE CONDITION \"STATUS LIGHT IS ON THE TOP HALF\"", "QUESTION PARK"}, { "LOCATION ALIGNS WITH CONDITION \"CROSSHAIR IS YELLOW OR PURPLE\"", "FLASHING HEIGHTS"}, { "LOCATION ALIGNS WITH THE CONDITION \"TARGET'S USERNAME CONTAINS AN E\"", "ENGLISH CREST"}, { "LOCATION ALIGNS WITH THE CONDITION \"CROSSHAIR IS RED OR PURPLE\"", "SUEET FALLS"}, { "LOCATION ALIGNS WITH THE CONDITION \"BORDER OF MESSAGE IS BLACK\"", "MATCH ACRES"}, { "LOCATION ALIGNS WITH THE CONDITION \"MESSAGE IS ABOVE THE CROSSHAIR\"", "BLACK KNOLL"}, { "CONDITION ALIGNS WITH SIMONSBOROUGH", "ARROWS ARE BLUE OR RED"}, { "CONDITION ALIGNS WITH TALKINGTON", "BUTTONS ARE TRIANGLES"} },
        new string[,] { { "INGREDIENT HAS VALUE 1", "OASIS LEAF" }, { "INGREDIENT HAS VALUE 3", "CITRONIA SEED"}, { "INGREDIENT HAS VALUE 4", "DREAM FLUFF"}, { "INGREDIENT HAS VALUE 5", "JOY ROOT CLOVER"}, { "INGREDIENT HAS VALUE 6", "TONIC FLOWER"}, { "INGREDIENT HAS VALUE 8", "CINDER HORSE"}, { "RECIPE CONTAINS TWO BRISK BERRIES", "OASIS BERRY"}, { "RECIPE CONTAINS TWO PEPPERCHERRIES", "CHERRY BOOST"}, { "RECIPE CONTAINS CITRONIA SEEDS AND TONIC FLOWER", "BITTER FRUIT"}, { "RECIPE CONTAINS BRISK BERRY AND PEPPERCHERRY", "DREAM SPICE"}, { "RECIPE CONTAINS BRISK BERRY AND CINDER HORSE", "CLOVER QUENCHER"}, { "RECIPE CONTAINS CITRONIA SEEDS AND JOY ROOT CLOVER", "RADIANCE BLEND"}, { "RECIPE CONTAINS DREAM FLUFF, JOY ROOT CLOVER, AND PEPPERCHERRY", "CAYENNE TWILIGHT"}, { "RECIPE CONTAINS DREAM FLUFF AND CINDER HORSE", "CINDER FLOWER"}, { "RECIPE CONTAINS PEPPERCHERRY AND CINDER HORSE", "THE LAYTON ELIXIR"} },
        new string[,] { { "23RD OF JANUARY", "TALIA YORK"}, { "11TH OF MAY", "MARIA WU"}, { "5TH OF NOVEMBER", "ESTHER BANKS"}, { "19TH OF NOVEMBER", "ZACKARY MIRANDA"}, { "23RD OF FEBRUARY", "JASMIN BURN"}, { "20TH OF AUGUST", "ISABELLA ROSE"}, { "20TH OF JANUARY", "ALFRED JONES"}, { "10TH OF JUNE", "ARCHIE LAMBERT"}, { "16TH OF SEPTEMBER", "SHANIA CROSSLEY"}, { "23RD OF OCTOBER", "DIANE COLES"}, { "22ND OF JULY", "PARKER MCKAY"}, { "9TH OF SEPTEMBER", "LLOYD HATFIELD"}, { "8TH OF JULY", "CADENCE PETERSEN"}, { "22ND OF APRIL", "MELINA CONNER"}, { "3RD OF MARCH", "LEE MACKOLE"}, { "22ND OF DECEMBER", "MORRIS HENDRICKS"}, { "19TH OF JANUARY", "ALEXA LEWIS"}, { "2ND OF APRIL", "TREVOR MACKENZIE"}, { "21ST OF NOVEMBER", "WADE DOWNTOWN"}, { "21ST OF OCTOBER", "WALT KINGFAS"}, { "30TH OF MARCH", "FAYE CESTPAS"}, { "2ND OF MAY", "ANNAH OHMBOUND"}, { "20TH OF MARCH", "STANLEY BLANC"}, { "10TH OF JANUARY", "LEAH HEAD"}, { "10TH OF DECEMBER", "YOSEF PAINE"}, { "30TH OF MAY", "TEA ALDRED"}, { "6TH OF APRIL", "FRANKLYN CULLEN"}, { "17TH OF DECEMBER", "JOSHUA BARNES"}, { "6TH OF NOVEMBER", "DONTE ENGLISH"}, { "5TH OF JANUARY", "FRASER DORSEY"}, { "10TH OF MARCH", "RACHEL SIMPSON"}, { "17TH OF JUNE", "DAN SALGADO"}, { "9TH OF FEBRUARY", "ALISSIA RRYNA"}, { "18TH OF OCTOBER", "MICHAEL BONILLA"}, { "5TH OF MARCH", "CHARLIE SANFORD"}, { "8TH OF OCTOBER", "ELISABETH PETERSEN"}, { "17TH OF MAY", "IVAN COURTNEY"}, { "28TH OF DECEMNBER", "THOMAS OSMAND"}, { "10TH OF JANUARY", "ASHLEY STENNISH"}, { "8TH OF JUNE", "DON LOGAN"}, { "4TH OF APRIL", "LILLY ARCHER"}, { "3RD OF MAY", "SYDNEY NORTH"} },
        new string[,] { { "AIRLINE DOES NOT PERMIT GAME CONTROLLERS", "SPARKJET AIRWAYS" }, { "AIRLINE DOES NOT PERMIT HANDCUFFS", "WHIZBANG AIRWAYS"}, { "AIRLINE DOES NOT PERMIT SHIRTS", "DYNAMITEPLUS AIRWAYS"}, { "AIRLINE DOES NOT PERMIT FLASHLIGHTS", "POPAIR TRAVEL"}, { "AIRLINE DOES NOT PERMIT PASSPORTS", "BOOMSKY EXPRESS"}, { "ITEM PREVENTS ITEMS FROM BEING CONFISCATED", "STAR BADGE"}, { "ITEM MUST BE CONFISCATED ANY OF A, B, X, OR Y ARE PRESENT IN THE SRIAL NUMBER", "GAME CONTROLLER"}, { "ITEM MUST BE CONFICATED IF IT CONTAINED IN A PRIMARY-COLOURED BAG", "NAIL POLISH"}, { "ITEM MUST BE CONFISCATED IF AN INDICATOR LABELLED \"CAR\" IS PRESENT", "WINE BOTTLE"} },
        new string[,] { { "MUST BE POSITIONED NEXT TO A ROAD", "HOUSING COMPLEX"}, { "CREATES ADDITIONAL STRUCTURES ALONG ITS ROW AND COLUMN", "ROAD INTERSECTION"}, { "MUST SHARE A ROAD WITH, BUT NOT BE ADJACENT TO, A HOUSING COMPLEX", "SHOPPING MARKET"}, { "MUST BE ADJACENT TO A LIBRARY OR SCHOOL BUT NOT A ROAD", "PARK CENTER"} },
        new string[,] { { "RED AND YELLOW", "JALAPENO CHEDDAR" }, { "ONLY YELLOW", "TRIPLE CHEESE"}, { "ONLY BLUE", "COOL RANCH"}, { "RED AND BLUE", "SWEET CHILLI AND SOUR CREAM"} }
    };
    private readonly string[] exceptions = new string[] { "THE", "A", "OF", "AU", "AUX", "AN", "AND", "I", "IS" };
    private IEnumerator cycle;
    private string[] subselect = new string[9];
    private string subinits;
    private string[] qselect = new string[3];
    private string[,] aselect = new string[3, 2];
    private string submission = "";
    private int stage;
    private bool gameon;

    private static int moduleIDCounter;
    private int moduleID;
    private bool moduleSolved;

    JubblyModSettings settings = new JubblyModSettings();

    private static Dictionary<string, object>[] TweaksEditorSettings = new Dictionary<string, object>[]
 {
          new Dictionary<string, object>
          {
            { "Filename", "SubblyJubblySettings.json"},
            { "Name", "Subbly Jubbly" },
            { "Listings", new List<Dictionary<string, object>>
                {
                    new Dictionary<string, object> {  { "Key", "A" }, { "Text", "A words" } },
                    new Dictionary<string, object> {  { "Key", "B" }, { "Text", "B words"} },
                    new Dictionary<string, object> {  { "Key", "C" }, { "Text", "C words"} },
                    new Dictionary<string, object> {  { "Key", "D" }, { "Text", "D words"} },
                    new Dictionary<string, object> {  { "Key", "E" }, { "Text", "E words"} },
                    new Dictionary<string, object> {  { "Key", "F" }, { "Text", "F words"} },
                    new Dictionary<string, object> {  { "Key", "G" }, { "Text", "G words"} },
                    new Dictionary<string, object> {  { "Key", "H" }, { "Text", "H words"} },
                    new Dictionary<string, object> {  { "Key", "I" }, { "Text", "I words"} },
                    new Dictionary<string, object> {  { "Key", "J" }, { "Text", "J words"} },
                    new Dictionary<string, object> {  { "Key", "K" }, { "Text", "K words"} },
                    new Dictionary<string, object> {  { "Key", "L" }, { "Text", "L words"} },
                    new Dictionary<string, object> {  { "Key", "M" }, { "Text", "M words"} },
                    new Dictionary<string, object> {  { "Key", "N" }, { "Text", "N words"} },
                    new Dictionary<string, object> {  { "Key", "O" }, { "Text", "O words"} },
                    new Dictionary<string, object> {  { "Key", "P" }, { "Text", "P words"} },
                    new Dictionary<string, object> {  { "Key", "R" }, { "Text", "R words"} },
                    new Dictionary<string, object> {  { "Key", "S" }, { "Text", "S words"} },
                    new Dictionary<string, object> {  { "Key", "T" }, { "Text", "T words"} },
                    new Dictionary<string, object> {  { "Key", "U" }, { "Text", "U words"} },
                    new Dictionary<string, object> {  { "Key", "V" }, { "Text", "V words"} },
                    new Dictionary<string, object> {  { "Key", "W" }, { "Text", "W words"} },
                    new Dictionary<string, object> {  { "Key", "Y" }, { "Text", "Y words"} },
                    new Dictionary<string, object> {  { "Key", "Z" }, { "Text", "Z words"} },
                }
            }
          }
 };

    private void Awake()
    {
        ModConfig<JubblyModSettings> config = new ModConfig<JubblyModSettings>("SubblyJubblySettings");
        settings = config.Read();
        config.Write(settings);
        foreach (var entry in settings.GetDict())
        {
            if (entry.Value == null || entry.Value.Count == 0)
                subblies.Add(entry.Key, defaultSubblies[entry.Key]);
            else subblies.Add(entry.Key, entry.Value);
        }
    }


    private void Start()
    {
        moduleID = ++moduleIDCounter;
        char[] rand = Enumerable.Range(0, 24).ToArray().Shuffle().Select(i => usedLetters[i]).ToArray();
        for (int i = 0; i < 9; i++)
        {
            subselect[i] = subblies[rand[i]].PickRandom();
            subinits += subselect[i][0].ToString();
        }
        cycle = Cycle();
        StartCoroutine(cycle);
        Debug.LogFormat("[Subbly Jubbly #{0}] The list of words to substitute into the answers is: {1}", moduleID, string.Join(", ", subselect));
        foreach (KMSelectable button in buttons)
        {
            int b = buttons.IndexOf(button);
            button.OnInteract = delegate ()
            {
                if (!moduleSolved)
                {
                    switch (b)
                    {
                        case 0:
                            if (!gameon)
                            {
                                gameon = true;
                                StopCoroutine(cycle);
                                subdisp.text = "GOOD LUCK";
                                StartCoroutine(Flip(false));
                                Audio.PlaySoundAtTransform("Start", transform);
                                buttondown.localPosition += new Vector3(0, 20, 0);
                                button.AddInteractionPunch();
                                Audio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.BigButtonRelease, buttondown);
                            }
                            break;
                        case 1:
                            if (gameon && submission.Length > 0)
                            {
                                button.AddInteractionPunch(0.6f);
                                Audio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.ButtonPress, button.transform);
                                if (submission.Length > 0)
                                    submission = submission.Remove(submission.Length - 1);
                                qa[1].text = submission;
                            }
                            break;
                        case 2:
                            if (gameon && submission.Length > 0)
                            {
                                button.AddInteractionPunch(0.6f);
                                Audio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.ButtonPress, button.transform);
                                if (submission.Last() != ' ')
                                {
                                    submission += " ";
                                    qa[1].text += " ";
                                }
                            }
                            break;
                        case 3:
                            if (gameon && submission.Length > 0)
                            {
                                button.AddInteractionPunch(0.6f);
                                Audio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.ButtonPress, button.transform);
                                if (submission.Last() == ' ')
                                    submission = submission.Remove(submission.Length - 1);
                                Debug.LogFormat("[Subbly Jubbly #{0}] Submitted {1}.", moduleID, submission);
                                if (submission == aselect[stage, 1])
                                {
                                    Audio.PlaySoundAtTransform("InputCorrect", transform);
                                    stage++;
                                    if (stage > 2)
                                    {
                                        qa[0].text = "";
                                        displays[0].text = "";
                                        displays[1].text = "GG";
                                        moduleSolved = true;
                                        Audio.PlaySoundAtTransform("Solve", transform);
                                        StartCoroutine(Congratulations());
                                        module.HandlePass();
                                        StartCoroutine(Flip(true));
                                    }
                                    else
                                    {
                                        displays[0].text = (stage + 1).ToString();
                                        submission = "";
                                        qa[1].text = "";
                                        qa[0].text = qselect[stage];
                                        QLog(stage);
                                    }
                                }
                                else
                                {
                                    module.HandleStrike();
                                    Audio.PlaySoundAtTransform("Strike", transform);
                                    StartCoroutine(Flip(true));
                                    gameon = false;
                                    StartCoroutine(cycle);
                                    submission = "";
                                    qa[0].text = "";
                                    qa[1].text = "";
                                    displays[0].text = "";
                                    displays[1].text = "";
                                }
                            }
                            break;
                        default:
                            if (gameon)
                            {
                                button.AddInteractionPunch(0.3f);
                                Audio.PlaySoundAtTransform("Click", button.transform);
                                string k = "QWERTYUIOPASDFGHJKLZXCVBNM"[b - 4].ToString();
                                qa[1].text += k;
                                submission += k;
                            }
                            break;
                    }
                }
                return false;
            };
        }
    }

    private IEnumerator Cycle()
    {
        int i = 0;
        while (!moduleSolved)
        {
            subdisp.text = subselect[i];
            yield return new WaitForSeconds(0.8f);
            subdisp.text = "";
            yield return new WaitForSeconds(0.2f);
            i += 1;
            i %= 9;
        }
    }

    private IEnumerator Flip(bool b)
    {
        StopCoroutine("Countdown");
        board[b ? 1 : 2].SetActive(true);
        float e = 0;
        while (e < 180)
        {
            float d = Time.deltaTime;
            e += 60 * d;
            board[0].transform.Rotate(0, 0, 60 * d);
            yield return null;
        }
        if (b)
        {
            board[0].transform.localEulerAngles = new Vector3(0, 0, 0);
            if (!moduleSolved)
            {
                gameon = false;
                buttondown.localPosition -= new Vector3(0, 20, 0);
            }
            board[2].SetActive(false);
            displays[0].text = "";
            displays[1].text = "";
        }
        else
        {
            board[0].transform.localEulerAngles = new Vector3(0, 0, 180);
            board[1].SetActive(false);
            stage = 0;
            int[] rand = Enumerable.Range(0, questions.Length).ToArray().Shuffle().ToArray();
            int k = -1;
            for (int i = 0; i < 3; i++)
            {
                bool exists = false;
                while (!exists)
                {
                    k++;
                    int q = jubblies[rand[k]].Length / 2;
                    int[] testorder = Enumerable.Range(0, q).ToArray().Shuffle().ToArray();
                    for (int j = 0; j < q; j++)
                    {
                        int p = testorder[j];
                        string[] a = jubblies[rand[k]][p, 1].Split(' ');
                        if (subinits.Any(x => a.Where(z => !exceptions.Contains(z)).Select(z => z[0].ToString()).Contains(x.ToString())))
                        {
                            qselect[i] = "WHICH " + questions[rand[k]] + jubblies[rand[k]][p, 0] + "?";
                            aselect[i, 0] = a.Join();
                            aselect[i, 1] = Substitute(a);
                            exists = true;
                            break;
                        }
                    }
                }
            }
            qa[0].text = qselect[0];
            displays[0].text = "1";
            displays[1].text = "180";
            StartCoroutine("Countdown");
            QLog(0);
        }
    }

    private IEnumerator Countdown()
    {
        for (int i = 180; i > 0; i--)
        {
            displays[1].text = i.ToString();
            yield return new WaitForSeconds(1);
        }
        displays[1].text = "0";
        module.HandleStrike();
        qa[0].text = "";
        qa[1].text = "";
        submission = "";
        Debug.LogFormat("[Subbly Jubbly #{0}] Out of time.", moduleID);
        StartCoroutine(cycle);
        StartCoroutine(Flip(true));
    }

    private string Substitute(string[] a)
    {
        string[] x = new string[a.Length];
        for (int i = 0; i < a.Length; i++)
        {
            if (!exceptions.Contains(a[i]))
            {
                for (int j = 0; j < 9; j++)
                {
                    if (!x.Contains(subselect[j]) && subselect[j][0] == a[i][0])
                    {
                        x[i] = subselect[j];
                        goto done;
                    }
                }
            }
            x[i] = a[i];
        done:;
        }
        return x.Join();
    }

    private void QLog(int s)
    {
        Debug.LogFormat("[Subbly Jubbly #{0}] Question {1}: {2}", moduleID, s + 1, qselect[s]);
        Debug.LogFormat("[Subbly Jubbly #{0}] Answer: {1}", moduleID, aselect[s, 0]);
        Debug.LogFormat("[Subbly Jubbly #{0}] Expectation: {1}", moduleID, aselect[s, 1]);
    }

    private IEnumerator Congratulations()
    {
        string[] suffixes = new string[12] { "OOGLY", "UMPY", "UNKY", "UBBLY", "OMBUS", "OBBY", "ITTERY", "UMBLE", "UZZLE", "AWPY", "IGGLY", "ANGLY" };
        while (moduleSolved)
        {
            int r = Random.Range(0, 13);
            if (r > 9)
            {
                subdisp.text = "GOOD JOB";
                yield return new WaitForSeconds(0.625f);
            }
            else
            {
                subdisp.text = "G" + suffixes[r] + " J" + suffixes[r];
                yield return new WaitForSeconds(0.125f);
            }
        }
    }
#pragma warning disable 414
    private readonly string TwitchHelpMessage = "!{0} start [Presses button] | !{0} enter <A-Z > [Enters command into module, including spaces] | !{0} delete # [Removes the last # characters from the entry] | !{0} submit";
#pragma warning restore 414

    private IEnumerator ProcessTwitchCommand(string command)
    {
        string[] c = command.ToUpperInvariant().Split(' ');
        yield return null;
        if (!gameon)
        {
            if (c[0] == "START")
            {
                buttons[0].OnInteract();
            }
            else
                yield return "sendtochaterror!f Cannot interact with the module until the start command is given.";
        }
        else
        {
            if (c[0] == "ENTER")
            {
                string message = c.Skip(1).Join();
                if (message.Length < 1)
                {
                    yield return "sendtochaterror!f Empty message received.";
                    yield break;
                }
                for (int i = 0; i < message.Length; i++)
                {
                    if (message[i] == ' ')
                        buttons[2].OnInteract();
                    else
                    {
                        int q = "QWERTYUIOPASDFGHJKLZXCVBNM".IndexOf(message[i].ToString());
                        if (q < 0)
                        {
                            yield return "sendtochaterror!f " + message[i] + " is not a letter or a space";
                            yield break;
                        }
                        buttons[q + 4].OnInteract();
                    }
                    yield return new WaitForSeconds(0.125f);
                }
            }
            else if (c[0] == "DELETE")
            {
                if (c.Length != 2)
                {
                    yield return "sendtochaterror!f Invalid delete command length.";
                    yield break;
                }
                int d;
                if (int.TryParse(c[1], out d))
                {
                    for (int i = 0; i < d; i++)
                    {
                        if (submission.Length < 1)
                            yield break;
                        buttons[1].OnInteract();
                        yield return null;
                    }
                }
                else
                    yield return "sendtochaterror!f " + c[1] + " is not a number.";

            }
            else if (c[0] == "SUBMIT")
            {
                if (c.Length > 1)
                {
                    yield return "sendtochaterror!f Invalid submission command. Use the enter command to type.";
                    yield break;
                }
                if (submission.Length < 1)
                {
                    yield return "sendtochaterror!f Cannot submit blank entry.";
                    yield break;
                }
                buttons[3].OnInteract();
            }
            else
            {
                yield return "sendtochaterror!f " + command + " is an invalid command.";
            }
        }
    }

    private IEnumerator TwitchHandleForcedSolve()
    {
        if (!gameon)
            buttons[0].OnInteract();
        while (displays[0].text == "") yield return true;
        int start = stage;
        for (int i = start; i < 3; i++)
        {
            while (!aselect[i, 1].StartsWith(submission))
            {
                buttons[1].OnInteract();
                yield return new WaitForSeconds(0.125f);
            }
            int start2 = submission.Length;
            for (int j = start2; j < aselect[i, 1].Length; j++)
            {
                if (aselect[i, 1][j] == ' ')
                    buttons[2].OnInteract();
                else
                    buttons["QWERTYUIOPASDFGHJKLZXCVBNM".IndexOf(aselect[i, 1][j].ToString()) + 4].OnInteract();
                yield return new WaitForSeconds(0.125f);
            }
            buttons[3].OnInteract();
            yield return new WaitForSeconds(0.125f);
        }
    }
}
